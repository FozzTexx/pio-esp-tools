#!/usr/bin/env python3
#
# Created by FozzTexx

import argparse
import os
import subprocess
import json

PLATFORMIO_INI = "platformio.ini"
PLATFORMIO_GEN = "platformio-generated.ini"
PLATFORMIO_PATH = os.path.expanduser("~/.platformio/packages/toolchain-xtensa-esp32/bin")
BACKTRACER = "xtensa-esp32-elf-addr2line"

def build_argparser():
  parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter)
  parser.add_argument("backtrace", nargs="+", help="backtrace hex addresses")
  parser.add_argument("--flag", action="store_true", help="flag to do something")
  return parser

def dictify(array):
  if not isinstance(array, (list, tuple)):
    return array

  d = dict()
  for elem in array:
    if isinstance(elem, (list, tuple)):
      d[elem[0]] = dictify(elem[1])
    else:
      return array

  return d

def get_platform():
  missing_ini = False
  if not os.path.exists(PLATFORMIO_INI):
    missing_ini = True
    os.symlink(PLATFORMIO_GEN, PLATFORMIO_INI)

  cmd = ["platformio", "project", "config", "--json-output"]
  config = dictify(json.loads(subprocess.run(cmd, capture_output=True, text=True).stdout))
  if 'platformio' in config:
    platform = config['platformio']['default_envs'][0]
  else:
    for key in config:
      if key.startswith("env:"):
        platform = key[4:]

  if missing_ini:
    os.unlink(PLATFORMIO_INI)

  return platform

def main():
  args = build_argparser().parse_args()

  if not os.path.exists(PLATFORMIO_INI) and not os.path.exists(PLATFORMIO_GEN):
    print("Not in project directory")
    exit(1)

  platform = get_platform()
  firmware_path = f".pio/build/{platform}/firmware.elf"
  
  cmd = [os.path.join(PLATFORMIO_PATH, BACKTRACER), "-aspCfire",
         firmware_path, *args.backtrace]
  subprocess.run(cmd)
  return

if __name__ == '__main__':
  exit(main() or 0)
